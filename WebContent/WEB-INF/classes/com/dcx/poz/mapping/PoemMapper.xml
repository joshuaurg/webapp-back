<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dcx.poz.dao.PoemMapper">
  <resultMap id="BaseResultMap" type="com.dcx.poz.model.Poem">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="content" jdbcType="VARCHAR" property="content" />
    <result column="profileImg" jdbcType="VARCHAR" property="profileImg" />
    <result column="creTime" jdbcType="TIMESTAMP" property="creTime" />
    <result column="delFlag" jdbcType="INTEGER" property="delFlag" />
  </resultMap>
  <sql id="Base_Column_List">
    id, author, title, content, profileImg, creTime, delFlag
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from poem
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from poem
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.dcx.poz.model.Poem">
    insert into poem (id, author, title, 
      content, profileImg, creTime, 
      delFlag)
    values (#{id,jdbcType=INTEGER}, #{author,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, 
      #{content,jdbcType=VARCHAR}, #{profileImg,jdbcType=VARCHAR}, #{creTime,jdbcType=TIMESTAMP}, 
      #{delFlag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.dcx.poz.model.Poem">
    insert into poem
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="content != null">
        content,
      </if>
      <if test="profileImg != null">
        profileImg,
      </if>
      <if test="creTime != null">
        creTime,
      </if>
      <if test="delFlag != null">
        delFlag,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=VARCHAR},
      </if>
      <if test="profileImg != null">
        #{profileImg,jdbcType=VARCHAR},
      </if>
      <if test="creTime != null">
        #{creTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.dcx.poz.model.Poem">
    update poem
    <set>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=VARCHAR},
      </if>
      <if test="profileImg != null">
        profileImg = #{profileImg,jdbcType=VARCHAR},
      </if>
      <if test="creTime != null">
        creTime = #{creTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        delFlag = #{delFlag,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getPoemList" parameterType="pageEntity" resultType="poem">
  	select * from poem 
  	<where>
  		<if test="params.author != null">
  			author = #{params.author}
  		</if>
  	</where>
  	<if test="rows != null">
        limit #{offset},#{rows}
    </if>
  </select>
   <select id="getPoemListCount" parameterType="pageEntity" resultType="java.lang.Integer">
  	select count(*) from poem 
  	<where>
  		<if test="params.author != null">
  			author = #{params.author}
  		</if>
  	</where>
  </select>
  
  <select id="getPoemPage" parameterType="pager" resultType="poem">
     select * from poem limit #{offset},#{size}
  </select>
  
</mapper>